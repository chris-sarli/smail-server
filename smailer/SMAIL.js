/**
 * Generated by the artifact generator [@inrupt/artifact-generator], version [1.0.4]
 * as part of artifact: [generated-vocab-smail], version: [0.0.1]
 * on 'Friday, December 17, 2021 1:52 PM'.
 *
 * Vocabulary built from input: [smail.ttl].
 *
 * The Smail ontology aims at describing Smail.
 */

// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
const { VocabTerm: _VocabTerm, getLocalStore } = require("@inrupt/solid-common-vocab");
const _DataFactory = require("@rdfjs/data-model");

const { namedNode: _namedNode } = _DataFactory;

function _NS(localName) {
  return _namedNode(`http://chris-sarli.inrupt.net/voc/smail/${localName}`);
}

/**
 * The Smail ontology aims at describing Smail.
 */
const SMAIL = {
  PREFIX: "smail",
  NAMESPACE: "http://chris-sarli.inrupt.net/voc/smail/",
  PREFIX_AND_NAMESPACE: { "smail": "http://chris-sarli.inrupt.net/voc/smail/" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * The representation of an email message.
   *
   * This term provides descriptions only in English.
   */
  Message: new _VocabTerm(
    _NS("Message"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Message`, "en")
    .addComment(`The representation of an email message.`, "en"),


  // *******************
  // All the Properties.
  // *******************

  /**
   * The unique identifier of a message.
   *
   * This term provides descriptions only in English.
   */
  messageId: new _VocabTerm(
    _NS("messageId"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Message ID`, "en")
    .addComment(`The unique identifier of a message.`, "en"),

  /**
   * The Message ID of the email message this message is replying to, if one exists.
   *
   * This term provides descriptions only in English.
   */
  replyingTo: new _VocabTerm(
    _NS("replyingTo"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Replying To`, "en")
    .addComment(`The Message ID of the email message this message is replying to, if one exists.`, "en"),

  /**
   * The plaintext content of an email message.
   *
   * This term provides descriptions only in English.
   */
  body: new _VocabTerm(
    _NS("body"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Body`, "en")
    .addComment(`The plaintext content of an email message.`, "en"),

  /**
   * The subject of an email message.
   *
   * This term provides descriptions only in English.
   */
  subject: new _VocabTerm(
    _NS("subject"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Subject`, "en")
    .addComment(`The subject of an email message.`, "en"),

  /**
   * The timestamp of sending or receipt of an email message.
   *
   * This term provides descriptions only in English.
   */
  timestamp: new _VocabTerm(
    _NS("timestamp"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Timestamp`, "en")
    .addComment(`The timestamp of sending or receipt of an email message.`, "en"),

  /**
   * The sender(s) of an email message, in JSON format.
   *
   * This term provides descriptions only in English.
   */
  from: new _VocabTerm(
    _NS("from"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`From`, "en")
    .addComment(`The sender(s) of an email message, in JSON format.`, "en"),

  /**
   * The recipient(s) of an email messagea, in JSON format.
   *
   * This term provides descriptions only in English.
   */
  to: new _VocabTerm(
    _NS("to"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`To`, "en")
    .addComment(`The recipient(s) of an email messagea, in JSON format.`, "en"),

  /**
   * Boolean indicating if recieved message is 'marked as read.'
   *
   * This term provides descriptions only in English.
   */
  is_read: new _VocabTerm(
    _NS("is_read"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`Read`, "en")
    .addComment(`Boolean indicating if recieved message is 'marked as read.'`, "en"),

  /**
   * The mailbox directory (URL for inbox, archive, drafts, sent) that the message is currently located in.
   *
   * This term provides descriptions only in English.
   */
  directory: new _VocabTerm(
    _NS("directory"),
    _DataFactory,
    getLocalStore(),
    false
  )
    .addLabel(`directory`, "en")
    .addComment(`The mailbox directory (URL for inbox, archive, drafts, sent) that the message is currently located in.`, "en"),

}

module.exports = { SMAIL };
